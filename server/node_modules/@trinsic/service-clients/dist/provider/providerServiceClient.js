"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var msRest = require("@azure/ms-rest-js");
var Models = require("./models");
exports.ProviderServiceModels = Models;
var Mappers = require("./models/mappers");
exports.ProviderServiceMappers = Mappers;
var Parameters = require("./models/parameters");
var providerServiceClientContext_1 = require("./providerServiceClientContext");
exports.ProviderServiceClientContext = providerServiceClientContext_1.ProviderServiceClientContext;
var ProviderServiceClient = /** @class */ (function (_super) {
    __extends(ProviderServiceClient, _super);
    /**
     * Initializes a new instance of the ProviderServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    function ProviderServiceClient(credentials, options) {
        return _super.call(this, credentials, options) || this;
    }
    ProviderServiceClient.prototype.getCloudWalletCount = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getCloudWalletCountOperationSpec, callback);
    };
    ProviderServiceClient.prototype.getCurrentUsage = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getCurrentUsageOperationSpec, callback);
    };
    ProviderServiceClient.prototype.searchUsage = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, searchUsageOperationSpec, callback);
    };
    ProviderServiceClient.prototype.addAsset = function (uploadedFiles, options, callback) {
        return this.sendOperationRequest({
            uploadedFiles: uploadedFiles,
            options: options
        }, addAssetOperationSpec, callback);
    };
    ProviderServiceClient.prototype.listNetworks = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listNetworksOperationSpec, callback);
    };
    ProviderServiceClient.prototype.getRegions = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getRegionsOperationSpec, callback);
    };
    ProviderServiceClient.prototype.listTenants = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listTenantsOperationSpec, callback);
    };
    ProviderServiceClient.prototype.createTenant = function (body, options, callback) {
        return this.sendOperationRequest({
            body: body,
            options: options
        }, createTenantOperationSpec, callback);
    };
    ProviderServiceClient.prototype.getTenant = function (tenantId, options, callback) {
        return this.sendOperationRequest({
            tenantId: tenantId,
            options: options
        }, getTenantOperationSpec, callback);
    };
    ProviderServiceClient.prototype.updateTenant = function (tenantId, body, options, callback) {
        return this.sendOperationRequest({
            tenantId: tenantId,
            body: body,
            options: options
        }, updateTenantOperationSpec, callback);
    };
    ProviderServiceClient.prototype.deleteTenant = function (tenantId, options, callback) {
        return this.sendOperationRequest({
            tenantId: tenantId,
            options: options
        }, deleteTenantOperationSpec, callback);
    };
    ProviderServiceClient.prototype.getTenantKeys = function (tenantId, options, callback) {
        return this.sendOperationRequest({
            tenantId: tenantId,
            options: options
        }, getTenantKeysOperationSpec, callback);
    };
    ProviderServiceClient.prototype.changeTenantKeys = function (tenantId, options, callback) {
        return this.sendOperationRequest({
            tenantId: tenantId,
            options: options
        }, changeTenantKeysOperationSpec, callback);
    };
    ProviderServiceClient.prototype.health = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, healthOperationSpec, callback);
    };
    return ProviderServiceClient;
}(providerServiceClientContext_1.ProviderServiceClientContext));
exports.ProviderServiceClient = ProviderServiceClient;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getCloudWalletCountOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/analytics/cloudWallets",
    responses: {
        200: {
            bodyMapper: Mappers.CloudWalletAnalyticsContract
        },
        default: {}
    },
    serializer: serializer
};
var getCurrentUsageOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/analytics/usage/current",
    responses: {
        200: {
            bodyMapper: Mappers.UsageContract
        },
        default: {}
    },
    serializer: serializer
};
var searchUsageOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/analytics/usage",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UsageContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var addAssetOperationSpec = {
    httpMethod: "POST",
    path: "provider/v1/assets",
    formDataParameters: [
        Parameters.uploadedFiles,
        Parameters.filename,
        Parameters.contentType
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.AssetContract
        },
        default: {}
    },
    serializer: serializer
};
var listNetworksOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/networks",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getRegionsOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/regions",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var listTenantsOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/tenants",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TenantContract"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createTenantOperationSpec = {
    httpMethod: "POST",
    path: "provider/v1/tenants",
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.TenantParameters, { required: true })
    },
    contentType: "application/json;odata.metadata=minimal;odata.streaming=true; charset=utf-8",
    responses: {
        200: {
            bodyMapper: Mappers.TenantContract
        },
        default: {}
    },
    serializer: serializer
};
var getTenantOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/tenants/{tenantId}",
    urlParameters: [
        Parameters.tenantId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TenantContract
        },
        default: {}
    },
    serializer: serializer
};
var updateTenantOperationSpec = {
    httpMethod: "PUT",
    path: "provider/v1/tenants/{tenantId}",
    urlParameters: [
        Parameters.tenantId
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.TenantUpdateParameters, { required: true })
    },
    contentType: "application/json;odata.metadata=minimal;odata.streaming=true; charset=utf-8",
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var deleteTenantOperationSpec = {
    httpMethod: "DELETE",
    path: "provider/v1/tenants/{tenantId}",
    urlParameters: [
        Parameters.tenantId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getTenantKeysOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/tenants/{tenantId}/keys",
    urlParameters: [
        Parameters.tenantId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TenantKeysContract
        },
        default: {}
    },
    serializer: serializer
};
var changeTenantKeysOperationSpec = {
    httpMethod: "PATCH",
    path: "provider/v1/tenants/{tenantId}/keys",
    urlParameters: [
        Parameters.tenantId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TenantKeysContract
        },
        default: {}
    },
    serializer: serializer
};
var healthOperationSpec = {
    httpMethod: "GET",
    path: "provider/v1/health",
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
