import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { ProviderServiceClientContext } from "./providerServiceClientContext";
declare class ProviderServiceClient extends ProviderServiceClientContext {
    /**
     * Initializes a new instance of the ProviderServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, options?: Models.ProviderServiceClientOptions);
    /**
     * @summary Get a count of total cloud wallets created on this account
     * @param [options] The optional parameters
     * @returns Promise<Models.GetCloudWalletCountResponse>
     */
    getCloudWalletCount(options?: msRest.RequestOptionsBase): Promise<Models.GetCloudWalletCountResponse>;
    /**
     * @param callback The callback
     */
    getCloudWalletCount(callback: msRest.ServiceCallback<Models.CloudWalletAnalyticsContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getCloudWalletCount(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CloudWalletAnalyticsContract>): void;
    /**
     * @summary Get the usage for the currently active period
     * @param [options] The optional parameters
     * @returns Promise<Models.GetCurrentUsageResponse>
     */
    getCurrentUsage(options?: msRest.RequestOptionsBase): Promise<Models.GetCurrentUsageResponse>;
    /**
     * @param callback The callback
     */
    getCurrentUsage(callback: msRest.ServiceCallback<Models.UsageContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getCurrentUsage(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsageContract>): void;
    /**
     * @summary Experimental endpoint using OData
     * @param [options] The optional parameters
     * @returns Promise<Models.SearchUsageResponse>
     */
    searchUsage(options?: msRest.RequestOptionsBase): Promise<Models.SearchUsageResponse>;
    /**
     * @param callback The callback
     */
    searchUsage(callback: msRest.ServiceCallback<Models.UsageContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    searchUsage(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsageContract[]>): void;
    /**
     * Upload a new asset to be used as an image for a tenant tile.
     * @summary Upload asset
     * @param uploadedFiles Asset files to be uploaded
     * @param [options] The optional parameters
     * @returns Promise<Models.AddAssetResponse>
     */
    addAsset(uploadedFiles: msRest.HttpRequestBody, options?: Models.ProviderServiceClientAddAssetOptionalParams): Promise<Models.AddAssetResponse>;
    /**
     * @param uploadedFiles Asset files to be uploaded
     * @param callback The callback
     */
    addAsset(uploadedFiles: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.AssetContract>): void;
    /**
     * @param uploadedFiles Asset files to be uploaded
     * @param options The optional parameters
     * @param callback The callback
     */
    addAsset(uploadedFiles: msRest.HttpRequestBody, options: Models.ProviderServiceClientAddAssetOptionalParams, callback: msRest.ServiceCallback<Models.AssetContract>): void;
    /**
     * List all available ledger networks.
     * Some networks are not available based on your subscription.
     * @summary List all ledger networks
     * @param [options] The optional parameters
     * @returns Promise<Models.ListNetworksResponse>
     */
    listNetworks(options?: msRest.RequestOptionsBase): Promise<Models.ListNetworksResponse>;
    /**
     * @param callback The callback
     */
    listNetworks(callback: msRest.ServiceCallback<Models.NetworkContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listNetworks(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkContract[]>): void;
    /**
     * @summary Get available regions
     * @param [options] The optional parameters
     * @returns Promise<Models.GetRegionsResponse>
     */
    getRegions(options?: msRest.RequestOptionsBase): Promise<Models.GetRegionsResponse>;
    /**
     * @param callback The callback
     */
    getRegions(callback: msRest.ServiceCallback<{
        [propertyName: string]: string;
    }>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getRegions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{
        [propertyName: string]: string;
    }>): void;
    /**
     * List all available tenants for the current authorization context.
     * @summary List all tenants
     * @param [options] The optional parameters
     * @returns Promise<Models.ListTenantsResponse>
     */
    listTenants(options?: msRest.RequestOptionsBase): Promise<Models.ListTenantsResponse>;
    /**
     * @param callback The callback
     */
    listTenants(callback: msRest.ServiceCallback<Models.TenantContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listTenants(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract[]>): void;
    /**
     * Create a tenant and setup a unique agency endpoint.
     * The agency will be set as an issuer.
     * @summary Create tenant
     * @param body Configuration options for creating new tenant
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateTenantResponse>
     */
    createTenant(body: Models.TenantParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateTenantResponse>;
    /**
     * @param body Configuration options for creating new tenant
     * @param callback The callback
     */
    createTenant(body: Models.TenantParameters, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * @param body Configuration options for creating new tenant
     * @param options The optional parameters
     * @param callback The callback
     */
    createTenant(body: Models.TenantParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * Get the specified tenant.
     * @summary Get tenant
     * @param tenantId The tenant identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetTenantResponse>
     */
    getTenant(tenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTenantResponse>;
    /**
     * @param tenantId The tenant identifier
     * @param callback The callback
     */
    getTenant(tenantId: string, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * @param tenantId The tenant identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getTenant(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * Update the specified tenant with the specified new configuration.
     * @summary Update tenant
     * @param tenantId The tenant identifier
     * @param body The tenant parameters
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    updateTenant(tenantId: string, body: Models.TenantUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tenantId The tenant identifier
     * @param body The tenant parameters
     * @param callback The callback
     */
    updateTenant(tenantId: string, body: Models.TenantUpdateParameters, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tenantId The tenant identifier
     * @param body The tenant parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    updateTenant(tenantId: string, body: Models.TenantUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Permanently delete a tenant, including their wallet, endpoint registrations and all data.
     * All definitions, connections and credentials issued will be deleted.
     * This action cannot be reverted.
     * @summary Delete tenant
     * @param tenantId
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteTenant(tenantId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tenantId
     * @param callback The callback
     */
    deleteTenant(tenantId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tenantId
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteTenant(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get the authorization keys for a tenant in the current authorization context.
     * @summary Get tenant keys
     * @param tenantId The tenant identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetTenantKeysResponse>
     */
    getTenantKeys(tenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTenantKeysResponse>;
    /**
     * @param tenantId The tenant identifier
     * @param callback The callback
     */
    getTenantKeys(tenantId: string, callback: msRest.ServiceCallback<Models.TenantKeysContract>): void;
    /**
     * @param tenantId The tenant identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getTenantKeys(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantKeysContract>): void;
    /**
     * Update the authorization keys for a tenant in the current authorization context.
     * @summary Update tenant keys
     * @param tenantId The tenant identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.ChangeTenantKeysResponse>
     */
    changeTenantKeys(tenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.ChangeTenantKeysResponse>;
    /**
     * @param tenantId The tenant identifier
     * @param callback The callback
     */
    changeTenantKeys(tenantId: string, callback: msRest.ServiceCallback<Models.TenantKeysContract>): void;
    /**
     * @param tenantId The tenant identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    changeTenantKeys(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantKeysContract>): void;
    /**
     * Check the health of the API.
     * @summary Health check
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    health(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param callback The callback
     */
    health(callback: msRest.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    health(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
export { ProviderServiceClient, ProviderServiceClientContext, Models as ProviderServiceModels, Mappers as ProviderServiceMappers };
