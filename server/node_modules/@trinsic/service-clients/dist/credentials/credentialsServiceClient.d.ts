import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { CredentialsServiceClientContext } from "./credentialsServiceClientContext";
declare class CredentialsServiceClient extends CredentialsServiceClientContext {
    /**
     * Initializes a new instance of the CredentialsServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, options?: Models.CredentialsServiceClientOptions);
    /**
     * Please use the Provider API instead.
     * Upload an image and return a URL with the static remote location.
     * @summary [Deprecated] Upload image
     * @param uploadedFiles The uploaded files
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.UploadImageResponse>
     */
    uploadImage(uploadedFiles: msRest.HttpRequestBody, options?: Models.CredentialsServiceClientUploadImageOptionalParams): Promise<Models.UploadImageResponse>;
    /**
     * @param uploadedFiles The uploaded files
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    uploadImage(uploadedFiles: msRest.HttpRequestBody, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param uploadedFiles The uploaded files
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    uploadImage(uploadedFiles: msRest.HttpRequestBody, options: Models.CredentialsServiceClientUploadImageOptionalParams, callback: msRest.ServiceCallback<string>): void;
    /**
     * Please use the Provider API instead.
     * List all available ledger networks.
     * Some networks are not available based on your subscription.
     * @summary [Deprecated] List all ledger networks
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.ListNetworksResponse>
     */
    listNetworks(options?: msRest.RequestOptionsBase): Promise<Models.ListNetworksResponse>;
    /**
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    listNetworks(callback: msRest.ServiceCallback<Models.NetworkContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    listNetworks(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkContract[]>): void;
    /**
     * This endpoint is no longer needed.
     * Get the latest transaction author agreement and acceptance methods if one is set on the
     * specified network.
     * @summary [Deprecated] Get network transaction author agreement
     * @param networkId The network identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.GetTransactionAuthorAgreementResponse>
     */
    getTransactionAuthorAgreement(networkId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTransactionAuthorAgreementResponse>;
    /**
     * @param networkId The network identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getTransactionAuthorAgreement(networkId: string, callback: msRest.ServiceCallback<Models.NetworkTxnAgreementContract>): void;
    /**
     * @param networkId The network identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getTransactionAuthorAgreement(networkId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkTxnAgreementContract>): void;
    /**
     * This endpoint is no longer needed.
     * Accept the latest transaction author agreement on the specified network.
     * @summary [Deprecated] Accept network transaction author agreement
     * @param tenantId The tenant identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<msRest.RestResponse>
     */
    acceptTransactionAuthorAgreement(tenantId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tenantId The tenant identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    acceptTransactionAuthorAgreement(tenantId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tenantId The tenant identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    acceptTransactionAuthorAgreement(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Retrieve a list of all connections.
     * Optionally, list only connections in a specified state.
     * @summary List all connections
     * @param [options] The optional parameters
     * @returns Promise<Models.ListConnectionsResponse>
     */
    listConnections(options?: Models.CredentialsServiceClientListConnectionsOptionalParams): Promise<Models.ListConnectionsResponse>;
    /**
     * @param callback The callback
     */
    listConnections(callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnections(options: Models.CredentialsServiceClientListConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * Initiate a new connection by creating an invitation.
     * The newly created connection record will be in state 'Invited' until the other party has
     * accepted the invitation.
     * The response body includes details about the newly creation connection.
     * @summary Create connection
     * @param body Connection invitation parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateConnectionResponse>
     */
    createConnection(body: Models.ConnectionInvitationParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateConnectionResponse>;
    /**
     * @param body Connection invitation parameters
     * @param callback The callback
     */
    createConnection(body: Models.ConnectionInvitationParameters, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @param body Connection invitation parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createConnection(body: Models.ConnectionInvitationParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * Get the specified connection.
     * @summary Get connection
     * @param connectionId The connection identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetConnectionResponse>
     */
    getConnection(connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetConnectionResponse>;
    /**
     * @param connectionId The connection identifier
     * @param callback The callback
     */
    getConnection(connectionId: string, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @param connectionId The connection identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getConnection(connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * Delete the specified connection.
     * @summary Delete connection
     * @param connectionId The connection identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteConnection(connectionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param connectionId The connection identifier
     * @param callback The callback
     */
    deleteConnection(connectionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param connectionId The connection identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteConnection(connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List all credentials that match any specified query parameters.
     * No query parameters are required, but any provided will filter the results.
     * @summary List all credentials
     * @param [options] The optional parameters
     * @returns Promise<Models.ListCredentialsResponse>
     */
    listCredentials(options?: Models.CredentialsServiceClientListCredentialsOptionalParams): Promise<Models.ListCredentialsResponse>;
    /**
     * @param callback The callback
     */
    listCredentials(callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listCredentials(options: Models.CredentialsServiceClientListCredentialsOptionalParams, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * Send a credential offer of the specified credential definition to the specified connection.
     * @summary Create and offer credential
     * @param body The definition and connection to which this offer will be sent
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateCredentialResponse>
     */
    createCredential(body: Models.CredentialOfferParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateCredentialResponse>;
    /**
     * @param body The definition and connection to which this offer will be sent
     * @param callback The callback
     */
    createCredential(body: Models.CredentialOfferParameters, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * @param body The definition and connection to which this offer will be sent
     * @param options The optional parameters
     * @param callback The callback
     */
    createCredential(body: Models.CredentialOfferParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * Get the specified credential.
     * @summary Get credential
     * @param credentialId The credential identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetCredentialResponse>
     */
    getCredential(credentialId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCredentialResponse>;
    /**
     * @param credentialId The credential identifier
     * @param callback The callback
     */
    getCredential(credentialId: string, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * @param credentialId The credential identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getCredential(credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * Issue the specified credential.
     * If the values offered were incorrect, changes to the values may be made here.
     * You must update all of the values, and they must be follow the same structure of the schema.
     * To keep the values the same as those included in the credential offer, leave the body blank.
     * @summary Issue credential
     * @param credentialId The credential identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    issueCredential(credentialId: string, options?: Models.CredentialsServiceClientIssueCredentialOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param credentialId The credential identifier
     * @param callback The callback
     */
    issueCredential(credentialId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param credentialId The credential identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    issueCredential(credentialId: string, options: Models.CredentialsServiceClientIssueCredentialOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * Revoke credential that was issued previously.
     * Process of revocation will update the revocation registry locally and on the ledger.
     * Issued credentials can still participate in proof workflows and be considered valid, but only if
     * the verifying ignores the revocation trail.
     * @summary Revoke an issued credential
     * @param credentialId The credential identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    revokeCredential(credentialId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param credentialId The credential identifier
     * @param callback The callback
     */
    revokeCredential(credentialId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param credentialId The credential identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    revokeCredential(credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Delete the specified credential.
     * This endpoint does not revoke the credential.
     * @summary Delete credential
     * @param credentialId The credential identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteCredential(credentialId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param credentialId The credential identifier
     * @param callback The callback
     */
    deleteCredential(credentialId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param credentialId The credential identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCredential(credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List all verification policies for the authenticated organization.
     * @summary List all verification policies
     * @param [options] The optional parameters
     * @returns Promise<Models.ListVerificationPoliciesResponse>
     */
    listVerificationPolicies(options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationPoliciesResponse>;
    /**
     * @param callback The callback
     */
    listVerificationPolicies(callback: msRest.ServiceCallback<Models.VerificationPolicyContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listVerificationPolicies(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationPolicyContract[]>): void;
    /**
     * Create a verification policy from the specified parameters.
     * @summary Create verification policy
     * @param body The verification policy parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateVerificationPolicyResponse>
     */
    createVerificationPolicy(body: Models.VerificationPolicyParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateVerificationPolicyResponse>;
    /**
     * @param body The verification policy parameters
     * @param callback The callback
     */
    createVerificationPolicy(body: Models.VerificationPolicyParameters, callback: msRest.ServiceCallback<Models.VerificationPolicyContract>): void;
    /**
     * @param body The verification policy parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createVerificationPolicy(body: Models.VerificationPolicyParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationPolicyContract>): void;
    /**
     * Get the specified verification policy.
     * @summary Get verification policy
     * @param policyId The verification policy identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetVerificationPolicyResponse>
     */
    getVerificationPolicy(policyId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationPolicyResponse>;
    /**
     * @param policyId The verification policy identifier
     * @param callback The callback
     */
    getVerificationPolicy(policyId: string, callback: msRest.ServiceCallback<Models.VerificationPolicyContract>): void;
    /**
     * @param policyId The verification policy identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getVerificationPolicy(policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationPolicyContract>): void;
    /**
     * Delete the specified verification policy.
     * @summary Delete verification policy
     * @param policyId The verification policy identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteVerificationPolicy(policyId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param policyId The verification policy identifier
     * @param callback The callback
     */
    deleteVerificationPolicy(policyId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param policyId The verification policy identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteVerificationPolicy(policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List all credential definitions for the authorization context.
     * @summary List all credential definitions
     * @param [options] The optional parameters
     * @returns Promise<Models.ListCredentialDefinitionsResponse>
     */
    listCredentialDefinitions(options?: msRest.RequestOptionsBase): Promise<Models.ListCredentialDefinitionsResponse>;
    /**
     * @param callback The callback
     */
    listCredentialDefinitions(callback: msRest.ServiceCallback<Models.CredentialDefinitionContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listCredentialDefinitions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract[]>): void;
    /**
     * A credential definition is created and saved on your cloud agent.
     * @summary Create credential definition and schema from parameters
     * @param body Definition parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateCredentialDefinitionResponse>
     */
    createCredentialDefinition(body: Models.CredentialDefinitionFromSchemaParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateCredentialDefinitionResponse>;
    /**
     * @param body Definition parameters
     * @param callback The callback
     */
    createCredentialDefinition(body: Models.CredentialDefinitionFromSchemaParameters, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * @param body Definition parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createCredentialDefinition(body: Models.CredentialDefinitionFromSchemaParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * Get the specified credential definition.
     * @summary Get credential definition
     * @param definitionId The credential definition identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetCredentialDefinitionResponse>
     */
    getCredentialDefinition(definitionId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCredentialDefinitionResponse>;
    /**
     * @param definitionId The credential definition identifier
     * @param callback The callback
     */
    getCredentialDefinition(definitionId: string, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * @param definitionId The credential definition identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getCredentialDefinition(definitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * Create a credential definition from the specified schema.
     * @summary Create credential definition from schema
     * @param schemaId The schema identifier
     * @param body The definition parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateCredentialDefinitionForSchemaIdResponse>
     */
    createCredentialDefinitionForSchemaId(schemaId: string, body: Models.CredentialDefinitionParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateCredentialDefinitionForSchemaIdResponse>;
    /**
     * @param schemaId The schema identifier
     * @param body The definition parameters
     * @param callback The callback
     */
    createCredentialDefinitionForSchemaId(schemaId: string, body: Models.CredentialDefinitionParameters, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * @param schemaId The schema identifier
     * @param body The definition parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createCredentialDefinitionForSchemaId(schemaId: string, body: Models.CredentialDefinitionParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialDefinitionContract>): void;
    /**
     * Delete the specified credential definition.
     * @summary Delete credential definition
     * @param credentialDefinitionId The credential definition identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteCredentialDefinition(credentialDefinitionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param credentialDefinitionId The credential definition identifier
     * @param callback The callback
     */
    deleteCredentialDefinition(credentialDefinitionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param credentialDefinitionId The credential definition identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCredentialDefinition(credentialDefinitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Register schema with the current agency tenant and write the schema to the ledger using the
     * tenant as issuer.
     * This does not create credential definition.
     * @summary Create schema
     * @param body Schema parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateSchemaResponse>
     */
    createSchema(body: Models.SchemaParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateSchemaResponse>;
    /**
     * @param body Schema parameters
     * @param callback The callback
     */
    createSchema(body: Models.SchemaParameters, callback: msRest.ServiceCallback<string>): void;
    /**
     * @param body Schema parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createSchema(body: Models.SchemaParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
    /**
     * List all schemas registered to or used by the authenticated organization.
     * @summary List all schemas
     * @param [options] The optional parameters
     * @returns Promise<Models.ListSchemasResponse>
     */
    listSchemas(options?: msRest.RequestOptionsBase): Promise<Models.ListSchemasResponse>;
    /**
     * @param callback The callback
     */
    listSchemas(callback: msRest.ServiceCallback<Models.SchemaRecord[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listSchemas(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SchemaRecord[]>): void;
    /**
     * Please use Verification Policies endpoints.
     * Get the specified verification definition.
     * @summary [Deprecated] Get verification definition
     * @param definitionId The verification definition identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.GetVerificationDefinitionResponse>
     */
    getVerificationDefinition(definitionId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationDefinitionResponse>;
    /**
     * @param definitionId The verification definition identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getVerificationDefinition(definitionId: string, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
    /**
     * @param definitionId The verification definition identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getVerificationDefinition(definitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
    /**
     * Please use Verification Policies endpoints.
     * List all verification definitions for the authenticated organization.
     * @summary [Deprecated] List all verification definitions
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.ListVerificationDefinitionsResponse>
     */
    listVerificationDefinitions(options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationDefinitionsResponse>;
    /**
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    listVerificationDefinitions(callback: msRest.ServiceCallback<Models.VerificationDefinitionContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    listVerificationDefinitions(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract[]>): void;
    /**
     * Please use Verification Policies endpoints.
     * A verification definition is created and saved on your cloud agent.
     * You can discover your definition based on the ID that is returned or the name.
     * @summary [Deprecated] Create verification definition
     * @param body The proof request
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.CreateVerificationDefinitionResponse>
     */
    createVerificationDefinition(body: Models.ProofRequest, options?: msRest.RequestOptionsBase): Promise<Models.CreateVerificationDefinitionResponse>;
    /**
     * @param body The proof request
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createVerificationDefinition(body: Models.ProofRequest, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
    /**
     * @param body The proof request
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createVerificationDefinition(body: Models.ProofRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationDefinitionContract>): void;
    /**
     * Please use Verification Policies endpoints.
     * Delete the specified verification definition.
     * @summary [Deprecated] Delete verification definition
     * @param verificationDefinitionId The verification definition identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<msRest.RestResponse>
     */
    deleteVerificationDefinition(verificationDefinitionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param verificationDefinitionId The verification definition identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    deleteVerificationDefinition(verificationDefinitionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param verificationDefinitionId The verification definition identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    deleteVerificationDefinition(verificationDefinitionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Send a message from the specified message parameters.
     * @summary Send message
     * @param body The message parameters
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    sendMessage(body: Models.BasicMessageParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param body The message parameters
     * @param callback The callback
     */
    sendMessage(body: Models.BasicMessageParameters, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param body The message parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    sendMessage(body: Models.BasicMessageParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List all messages for the specified connection.
     * @summary List all messages for connection
     * @param connectionId The connection identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.ListMessagesResponse>
     */
    listMessages(connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListMessagesResponse>;
    /**
     * @param connectionId The connection identifier
     * @param callback The callback
     */
    listMessages(connectionId: string, callback: msRest.ServiceCallback<Models.BasicMessageRecord[]>): void;
    /**
     * @param connectionId The connection identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    listMessages(connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BasicMessageRecord[]>): void;
    /**
     * Get the details for the specified message.
     * @summary Get message
     * @param messageId The message identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetMessageResponse>
     */
    getMessage(messageId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMessageResponse>;
    /**
     * @param messageId The message identifier
     * @param callback The callback
     */
    getMessage(messageId: string, callback: msRest.ServiceCallback<Models.BasicMessageContract>): void;
    /**
     * @param messageId The message identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getMessage(messageId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BasicMessageContract>): void;
    /**
     * Please use the Provider API instead.
     * List all tenants for the current authorization context.
     * @summary [Deprecated] List all tenants
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.ListTenantsResponse>
     */
    listTenants(options?: msRest.RequestOptionsBase): Promise<Models.ListTenantsResponse>;
    /**
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    listTenants(callback: msRest.ServiceCallback<Models.TenantContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    listTenants(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract[]>): void;
    /**
     * Please use the Provider API instead.
     * Create a new tenant and setup a unique agency endpoint.
     * The agency will be set as an issuer.
     * @summary [Deprecated] Create tenant
     * @param body Configuration options for creating new tenant
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.CreateTenantResponse>
     */
    createTenant(body: Models.TenantParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateTenantResponse>;
    /**
     * @param body Configuration options for creating new tenant
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createTenant(body: Models.TenantParameters, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * @param body Configuration options for creating new tenant
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createTenant(body: Models.TenantParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * Please use the Provider API instead.
     * Get the configuration for the specified tenant.
     * @summary [Deprectaed] Get tenant
     * @param tenantId The tenant identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.GetTenantResponse>
     */
    getTenant(tenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTenantResponse>;
    /**
     * @param tenantId The tenant identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getTenant(tenantId: string, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * @param tenantId The tenant identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getTenant(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantContract>): void;
    /**
     * Please use the Provider API instead.
     * Permanently remove the specified tenant, including their wallet, endpoint registrations and all
     * data.
     * All definitions, connections and credentials issued will be deleted.
     * This action cannot be reverted.
     * @summary [Deprecated] Delete tenant
     * @param tenantId The tenant identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<msRest.RestResponse>
     */
    deleteTenant(tenantId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param tenantId The tenant identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    deleteTenant(tenantId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param tenantId The tenant identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    deleteTenant(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Please use the Provider API instead.
     * If the tenant is configured with Dedicated endorsement, this action will check if the issuer DID
     * has the required ENDORSER role on the configured ledger network.
     * Additionally, check the acceptance of the transaction author agreement and return the text and
     * version if acceptance is required.
     * @summary [Deprecated] Get issuer status for current tenant
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.GetIssuerStatusResponse>
     */
    getIssuerStatus(options?: msRest.RequestOptionsBase): Promise<Models.GetIssuerStatusResponse>;
    /**
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getIssuerStatus(callback: msRest.ServiceCallback<Models.IssuerStatusContract>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    getIssuerStatus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IssuerStatusContract>): void;
    /**
     * Send a verification to the specified connection using an existing policy.
     * @summary Send verification to connection from policy
     * @param connectionId The connection identifier
     * @param policyId The policy identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.SendVerificationFromPolicyResponse>
     */
    sendVerificationFromPolicy(connectionId: string, policyId: string, options?: msRest.RequestOptionsBase): Promise<Models.SendVerificationFromPolicyResponse>;
    /**
     * @param connectionId The connection identifier
     * @param policyId The policy identifier
     * @param callback The callback
     */
    sendVerificationFromPolicy(connectionId: string, policyId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param connectionId The connection identifier
     * @param policyId The policy identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    sendVerificationFromPolicy(connectionId: string, policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Send a verification request to the specified connection from a set of parameters.
     * @summary Send verification to connection from parameters
     * @param connectionId The connection identifier
     * @param body The policy parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.SendVerificationFromParametersResponse>
     */
    sendVerificationFromParameters(connectionId: string, body: Models.VerificationPolicyParameters, options?: msRest.RequestOptionsBase): Promise<Models.SendVerificationFromParametersResponse>;
    /**
     * @param connectionId The connection identifier
     * @param body The policy parameters
     * @param callback The callback
     */
    sendVerificationFromParameters(connectionId: string, body: Models.VerificationPolicyParameters, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param connectionId The connection identifier
     * @param body The policy parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    sendVerificationFromParameters(connectionId: string, body: Models.VerificationPolicyParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Create a verification from the specified policy and send it to the specified connection.
     * @summary Send verification from policy
     * @param connectionId The connection identifier
     * @param policyId The verification policy identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.SendVerificationFromProposalResponse>
     */
    sendVerificationFromProposal(connectionId: string, policyId: string, options?: msRest.RequestOptionsBase): Promise<Models.SendVerificationFromProposalResponse>;
    /**
     * @param connectionId The connection identifier
     * @param policyId The verification policy identifier
     * @param callback The callback
     */
    sendVerificationFromProposal(connectionId: string, policyId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param connectionId The connection identifier
     * @param policyId The verification policy identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    sendVerificationFromProposal(connectionId: string, policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Create a connectionless verification from the specified policy.
     * Connectionless transport uses URLs that can be shared with the user over any existing transport
     * (email, SMS, web).
     * @summary Create connectionless verification from policy
     * @param policyId The policy identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateVerificationFromPolicyResponse>
     */
    createVerificationFromPolicy(policyId: string, options?: msRest.RequestOptionsBase): Promise<Models.CreateVerificationFromPolicyResponse>;
    /**
     * @param policyId The policy identifier
     * @param callback The callback
     */
    createVerificationFromPolicy(policyId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param policyId The policy identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    createVerificationFromPolicy(policyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Create verification from parameters.
     * Connectionless transport uses URLs that can be shared with the user over any existing transport
     * (email, SMS, web).
     * @summary Create connectionless verification from parameters
     * @param body The policy parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateVerificationFromParametersResponse>
     */
    createVerificationFromParameters(body: Models.VerificationPolicyParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateVerificationFromParametersResponse>;
    /**
     * @param body The policy parameters
     * @param callback The callback
     */
    createVerificationFromParameters(body: Models.VerificationPolicyParameters, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param body The policy parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createVerificationFromParameters(body: Models.VerificationPolicyParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * List all verifications.
     * Optionally filter by connection and/or definition.
     * @summary List all verifications
     * @param [options] The optional parameters
     * @returns Promise<Models.ListVerificationsResponse>
     */
    listVerifications(options?: Models.CredentialsServiceClientListVerificationsOptionalParams): Promise<Models.ListVerificationsResponse>;
    /**
     * @param callback The callback
     */
    listVerifications(callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listVerifications(options: Models.CredentialsServiceClientListVerificationsOptionalParams, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * Please use SendVerification(policyId) or CreateVerification(policyId) instead.
     * This endpoint can be used to send a verification definition to a connection, which will create a
     * verification ID to track the response from the connection.
     * If the parameter {connectionId} is not specified, this endpoint will create a connectionless
     * verification. A URL will be generated that can be shared with anonymous user.
     * @summary [Deprecated] Create/send verification
     * @param body The verification parameters
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.CreateVerificationResponse>
     */
    createVerification(body: Models.VerificationParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateVerificationResponse>;
    /**
     * @param body The verification parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createVerification(body: Models.VerificationParameters, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param body The verification parameters
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    createVerification(body: Models.VerificationParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Get the specified verification.
     * @summary Get verification
     * @param verificationId The verification identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetVerificationResponse>
     */
    getVerification(verificationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationResponse>;
    /**
     * @param verificationId The verification identifier
     * @param callback The callback
     */
    getVerification(verificationId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param verificationId The verification identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getVerification(verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Delete the specified verification.
     * @summary Delete verification
     * @param verificationId The verification identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteVerification(verificationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param verificationId The verification identifier
     * @param callback The callback
     */
    deleteVerification(verificationId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param verificationId The verification identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteVerification(verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * This action is now obsolete. Verifications are automatically verified when they are received.
     * Execute verification on this record. This is an expensive action and is executed by verifying
     * the proof against the ledger data.
     * @summary [Deprecated] Verify verification
     * @param verificationId The verification identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<Models.VerifyVerificationResponse>
     */
    verifyVerification(verificationId: string, options?: msRest.RequestOptionsBase): Promise<Models.VerifyVerificationResponse>;
    /**
     * @param verificationId The verification identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    verifyVerification(verificationId: string, callback: msRest.ServiceCallback<Models.VerificationResult>): void;
    /**
     * @param verificationId The verification identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    verifyVerification(verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationResult>): void;
    /**
     * List all webhooks registered with the authenticated organization.
     * @summary List all webhooks
     * @param [options] The optional parameters
     * @returns Promise<Models.ListWebhooksResponse>
     */
    listWebhooks(options?: msRest.RequestOptionsBase): Promise<Models.ListWebhooksResponse>;
    /**
     * @param callback The callback
     */
    listWebhooks(callback: msRest.ServiceCallback<Models.WebhookContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listWebhooks(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebhookContract[]>): void;
    /**
     * Register a webhook with the authenticated organization.
     * @summary Create webhook
     * @param body The webhook parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateWebhookResponse>
     */
    createWebhook(body: Models.WebhookParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateWebhookResponse>;
    /**
     * @param body The webhook parameters
     * @param callback The callback
     */
    createWebhook(body: Models.WebhookParameters, callback: msRest.ServiceCallback<Models.WebhookContract>): void;
    /**
     * @param body The webhook parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createWebhook(body: Models.WebhookParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WebhookContract>): void;
    /**
     * Remove a registered webhook from the authenticated organization.
     * @summary Remove webhook
     * @param webhookId The webhook identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    removeWebhook(webhookId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param webhookId The webhook identifier
     * @param callback The callback
     */
    removeWebhook(webhookId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param webhookId The webhook identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    removeWebhook(webhookId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Enable a registered webhook for the authenticated organization.
     * @summary Enable webhook
     * @param webhookId The webhook identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    enableWebhook(webhookId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param webhookId The webhook identifier
     * @param callback The callback
     */
    enableWebhook(webhookId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param webhookId The webhook identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    enableWebhook(webhookId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Enable a registered webhook for the authenticated organization.
     * @summary Disable webhook
     * @param webhookId The webhook identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    disableWebhook(webhookId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param webhookId The webhook identifier
     * @param callback The callback
     */
    disableWebhook(webhookId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param webhookId The webhook identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    disableWebhook(webhookId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Check the health of the API.
     * @summary Health check
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    health(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param callback The callback
     */
    health(callback: msRest.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    health(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
export { CredentialsServiceClient, CredentialsServiceClientContext, Models as CredentialsServiceModels, Mappers as CredentialsServiceMappers };
