import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { WalletServiceClientContext } from "./walletServiceClientContext";
declare class WalletServiceClient extends WalletServiceClientContext {
    /**
     * Initializes a new instance of the WalletServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, options?: Models.WalletServiceClientOptions);
    /**
     * Accept a connection invitation in the specified wallet.
     * The invitation can be in a form of URL or invitation JSON encoded as base64 data.
     * @summary Accept connection invitation
     * @param walletId The wallet identifier
     * @param invitation The base 64 encoded invitation
     * @param [options] The optional parameters
     * @returns Promise<Models.AcceptInvitationResponse>
     */
    acceptInvitation(walletId: string, invitation: string, options?: msRest.RequestOptionsBase): Promise<Models.AcceptInvitationResponse>;
    /**
     * @param walletId The wallet identifier
     * @param invitation The base 64 encoded invitation
     * @param callback The callback
     */
    acceptInvitation(walletId: string, invitation: string, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @param walletId The wallet identifier
     * @param invitation The base 64 encoded invitation
     * @param options The optional parameters
     * @param callback The callback
     */
    acceptInvitation(walletId: string, invitation: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * Get the specified connection in the specified wallet.
     * @summary Get connection
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetConnectionResponse>
     */
    getConnection(walletId: string, connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetConnectionResponse>;
    /**
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param callback The callback
     */
    getConnection(walletId: string, connectionId: string, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getConnection(walletId: string, connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract>): void;
    /**
     * @summary Delete a connection with the given identifier.
     * @param walletId The wallet identifier.
     * @param connectionId The connection identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteConnection(walletId: string, connectionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier.
     * @param connectionId The connection identifier.
     * @param callback The callback
     */
    deleteConnection(walletId: string, connectionId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier.
     * @param connectionId The connection identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteConnection(walletId: string, connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List all connections in the specified wallet in the "Connected" state.
     * @summary List all connections
     * @param walletId The wallet identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.ListConnectionsResponse>
     */
    listConnections(walletId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListConnectionsResponse>;
    /**
     * @param walletId The wallet identifier
     * @param callback The callback
     */
    listConnections(walletId: string, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * @param walletId The wallet identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnections(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * List all connection invitations in the specified wallet.
     * @summary List connection invitations
     * @param walletId The wallet identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.ListInvitationsResponse>
     */
    listInvitations(walletId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListInvitationsResponse>;
    /**
     * @param walletId The wallet identifier
     * @param callback The callback
     */
    listInvitations(walletId: string, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * @param walletId The wallet identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    listInvitations(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionContract[]>): void;
    /**
     * List all credentials in the specified wallet associated with the specified connection.
     * @summary List all credentials for connection
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.ListCredentialsForConnectionIdResponse>
     */
    listCredentialsForConnectionId(walletId: string, connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListCredentialsForConnectionIdResponse>;
    /**
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param callback The callback
     */
    listCredentialsForConnectionId(walletId: string, connectionId: string, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    listCredentialsForConnectionId(walletId: string, connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * List all credentials in the specified wallet
     * @summary List all credentials
     * @param walletId
     * @param [options] The optional parameters
     * @returns Promise<Models.ListCredentialsResponse>
     */
    listCredentials(walletId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListCredentialsResponse>;
    /**
     * @param walletId
     * @param callback The callback
     */
    listCredentials(walletId: string, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * @param walletId
     * @param options The optional parameters
     * @param callback The callback
     */
    listCredentials(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract[]>): void;
    /**
     * Get the specified credential in the specified wallet.
     * @summary Get credential
     * @param walletId The wallet identifier
     * @param credentialId The credential identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetCredentialResponse>
     */
    getCredential(walletId: string, credentialId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCredentialResponse>;
    /**
     * @param walletId The wallet identifier
     * @param credentialId The credential identifier
     * @param callback The callback
     */
    getCredential(walletId: string, credentialId: string, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * @param walletId The wallet identifier
     * @param credentialId The credential identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getCredential(walletId: string, credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * @summary Deletes the credential with the given identifier.
     * @param walletId The wallet identifier.
     * @param credentialId The credential identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteCredential(walletId: string, credentialId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier.
     * @param credentialId The credential identifier.
     * @param callback The callback
     */
    deleteCredential(walletId: string, credentialId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier.
     * @param credentialId The credential identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteCredential(walletId: string, credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Accept the specified credential offer in the specified wallet.
     * @summary Accept credential offer
     * @param walletId The wallet identifier
     * @param credentialId The credential identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    acceptCredentialOffer(walletId: string, credentialId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier
     * @param credentialId The credential identifier
     * @param callback The callback
     */
    acceptCredentialOffer(walletId: string, credentialId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier
     * @param credentialId The credential identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    acceptCredentialOffer(walletId: string, credentialId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Accept a credential offer using the provided URL or data.
     * The credential field can be in the form of a URL or JSON encoded as base64 data.
     * This endpoint is used to accept connectionless credential issuance.
     * @summary Accept credential offer from URL or data
     * @param walletId The wallet identifier
     * @param credentialData The credential data as URL or base64
     * @param [options] The optional parameters
     * @returns Promise<Models.AcceptCredentialResponse>
     */
    acceptCredential(walletId: string, credentialData: string, options?: msRest.RequestOptionsBase): Promise<Models.AcceptCredentialResponse>;
    /**
     * @param walletId The wallet identifier
     * @param credentialData The credential data as URL or base64
     * @param callback The callback
     */
    acceptCredential(walletId: string, credentialData: string, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * @param walletId The wallet identifier
     * @param credentialData The credential data as URL or base64
     * @param options The optional parameters
     * @param callback The callback
     */
    acceptCredential(walletId: string, credentialData: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CredentialContract>): void;
    /**
     * List all available verifications in the specified wallet for the specified connection.
     * @summary List all verifications for connection
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.ListVerificationsForConnectionResponse>
     */
    listVerificationsForConnection(walletId: string, connectionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationsForConnectionResponse>;
    /**
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param callback The callback
     */
    listVerificationsForConnection(walletId: string, connectionId: string, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    listVerificationsForConnection(walletId: string, connectionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * List all available verifications in the specified wallet.
     * @summary List all verifications
     * @param walletId The wallet identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.ListVerificationsResponse>
     */
    listVerifications(walletId: string, options?: msRest.RequestOptionsBase): Promise<Models.ListVerificationsResponse>;
    /**
     * @param walletId The wallet identifier
     * @param callback The callback
     */
    listVerifications(walletId: string, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * @param walletId The wallet identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    listVerifications(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract[]>): void;
    /**
     * Get the specified verification in the specified wallet.
     * @summary Get verification
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetVerificationResponse>
     */
    getVerification(walletId: string, verificationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetVerificationResponse>;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param callback The callback
     */
    getVerification(walletId: string, verificationId: string, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getVerification(walletId: string, verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @summary Deletes the verification with the given identifier.
     * @param walletId The wallet identifier.
     * @param verificationId The verification identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteVerification(walletId: string, verificationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier.
     * @param verificationId The verification identifier.
     * @param callback The callback
     */
    deleteVerification(walletId: string, verificationId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier.
     * @param verificationId The verification identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteVerification(walletId: string, verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Submit the verification using the provided policy parameters.
     * @summary Submit verification using policy parameters
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param body The verification policy parameters
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    submitVerification(walletId: string, verificationId: string, body: Models.VerificationPolicyCredentialParameters[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param body The verification policy parameters
     * @param callback The callback
     */
    submitVerification(walletId: string, verificationId: string, body: Models.VerificationPolicyCredentialParameters[], callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param body The verification policy parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    submitVerification(walletId: string, verificationId: string, body: Models.VerificationPolicyCredentialParameters[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Create a verification proposal from the specified policy
     * @summary Create verification proposal
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param body The proposal policy
     * @param [options] The optional parameters
     * @returns Promise<Models.ProposeVerificationResponse>
     */
    proposeVerification(walletId: string, connectionId: string, body: Models.VerificationPolicyParameters, options?: msRest.RequestOptionsBase): Promise<Models.ProposeVerificationResponse>;
    /**
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param body The proposal policy
     * @param callback The callback
     */
    proposeVerification(walletId: string, connectionId: string, body: Models.VerificationPolicyParameters, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * @param walletId The wallet identifier
     * @param connectionId The connection identifier
     * @param body The proposal policy
     * @param options The optional parameters
     * @param callback The callback
     */
    proposeVerification(walletId: string, connectionId: string, body: Models.VerificationPolicyParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationContract>): void;
    /**
     * Submit the verification with a credential that matches the requested information.
     * If a credential is not available for a certain policy, that policy will not be included in the
     * submitted verification.
     * @summary Submit verification with automatic credential selection
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    submitVerificationAutoSelect(walletId: string, verificationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param callback The callback
     */
    submitVerificationAutoSelect(walletId: string, verificationId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    submitVerificationAutoSelect(walletId: string, verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * List all available credentials that satisfy the verification request.
     * @summary List all credentials for verification
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param [options] The optional parameters
     * @returns Promise<Models.GetAvailableCredentialsForVerificationResponse>
     */
    getAvailableCredentialsForVerification(walletId: string, verificationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetAvailableCredentialsForVerificationResponse>;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param callback The callback
     */
    getAvailableCredentialsForVerification(walletId: string, verificationId: string, callback: msRest.ServiceCallback<Models.VerificationPolicyCredentialContract[]>): void;
    /**
     * @param walletId The wallet identifier
     * @param verificationId The verification identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    getAvailableCredentialsForVerification(walletId: string, verificationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationPolicyCredentialContract[]>): void;
    /**
     * Submit the verification from data with automatic credential selection.
     * Verification data can be in the form of a URL or base64 data.
     * @summary Submit verification with automatic credential selection from data
     * @param walletId The wallet identifier
     * @param verificationData The verification
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    submitVerificationFromDataAutoSelect(walletId: string, verificationData: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier
     * @param verificationData The verification
     * @param callback The callback
     */
    submitVerificationFromDataAutoSelect(walletId: string, verificationData: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier
     * @param verificationData The verification
     * @param options The optional parameters
     * @param callback The callback
     */
    submitVerificationFromDataAutoSelect(walletId: string, verificationData: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Gets the available credentials for parameters in a form of URL or proof request data
     * @param walletId The wallet identifier.
     * @param verificationData The verification.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetAvailableCredentialsForParametersResponse>
     */
    getAvailableCredentialsForParameters(walletId: string, verificationData: string, options?: msRest.RequestOptionsBase): Promise<Models.GetAvailableCredentialsForParametersResponse>;
    /**
     * @param walletId The wallet identifier.
     * @param verificationData The verification.
     * @param callback The callback
     */
    getAvailableCredentialsForParameters(walletId: string, verificationData: string, callback: msRest.ServiceCallback<Models.VerificationPolicyCredentialContract[]>): void;
    /**
     * @param walletId The wallet identifier.
     * @param verificationData The verification.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAvailableCredentialsForParameters(walletId: string, verificationData: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VerificationPolicyCredentialContract[]>): void;
    /**
     * @summary Submit verification using the provided policy parameters
     * @param walletId The wallet identifier.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    submitVerificationForParameters(walletId: string, options?: Models.WalletServiceClientSubmitVerificationForParametersOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier.
     * @param callback The callback
     */
    submitVerificationForParameters(walletId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier.
     * @param options The optional parameters
     * @param callback The callback
     */
    submitVerificationForParameters(walletId: string, options: Models.WalletServiceClientSubmitVerificationForParametersOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * List all custodian wallets for the current authorization context.
     * @summary List all wallets
     * @param [options] The optional parameters
     * @returns Promise<Models.ListWalletsResponse>
     */
    listWallets(options?: msRest.RequestOptionsBase): Promise<Models.ListWalletsResponse>;
    /**
     * @param callback The callback
     */
    listWallets(callback: msRest.ServiceCallback<Models.CustodianWalletContract[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listWallets(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustodianWalletContract[]>): void;
    /**
     * Create a new custodian wallet.
     * @summary Create wallet
     * @param body The wallet parameters
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateWalletResponse>
     */
    createWallet(body: Models.WalletParameters, options?: msRest.RequestOptionsBase): Promise<Models.CreateWalletResponse>;
    /**
     * @param body The wallet parameters
     * @param callback The callback
     */
    createWallet(body: Models.WalletParameters, callback: msRest.ServiceCallback<Models.CustodianWalletContract>): void;
    /**
     * @param body The wallet parameters
     * @param options The optional parameters
     * @param callback The callback
     */
    createWallet(body: Models.WalletParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustodianWalletContract>): void;
    /**
     * Please use the DELETE /wallets/{walletId} endpoint instead.
     * Permanently delete all connections, credentials and verification records for the specified
     * wallet.
     * @summary [Deprecated] Delete wallet by query
     * @param walletId The wallet identifier
     * @param [options] The optional parameters
     * @deprecated This operation is deprecated. Please do not use it any longer.
     * @returns Promise<msRest.RestResponse>
     */
    deleteWalletByQuery(walletId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    deleteWalletByQuery(walletId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier
     * @param options The optional parameters
     * @param callback The callback
     * @deprecated This operation is deprecated. Please do not use it any longer.
     */
    deleteWalletByQuery(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Permanently delete all connections, credentials and verification records for the specified
     * wallet.
     * @summary Delete wallet
     * @param walletId The wallet identifier
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteWallet(walletId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param walletId The wallet identifier
     * @param callback The callback
     */
    deleteWallet(walletId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param walletId The wallet identifier
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteWallet(walletId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Check the health of the API.
     * @summary Health check
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    health(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param callback The callback
     */
    health(callback: msRest.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    health(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
}
export { WalletServiceClient, WalletServiceClientContext, Models as WalletServiceModels, Mappers as WalletServiceMappers };
