"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var msRest = require("@azure/ms-rest-js");
var Models = require("./models");
exports.WalletServiceModels = Models;
var Mappers = require("./models/mappers");
exports.WalletServiceMappers = Mappers;
var Parameters = require("./models/parameters");
var walletServiceClientContext_1 = require("./walletServiceClientContext");
exports.WalletServiceClientContext = walletServiceClientContext_1.WalletServiceClientContext;
var WalletServiceClient = /** @class */ (function (_super) {
    __extends(WalletServiceClient, _super);
    /**
     * Initializes a new instance of the WalletServiceClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    function WalletServiceClient(credentials, options) {
        return _super.call(this, credentials, options) || this;
    }
    WalletServiceClient.prototype.acceptInvitation = function (walletId, invitation, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            invitation: invitation,
            options: options
        }, acceptInvitationOperationSpec, callback);
    };
    WalletServiceClient.prototype.getConnection = function (walletId, connectionId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            connectionId: connectionId,
            options: options
        }, getConnectionOperationSpec, callback);
    };
    WalletServiceClient.prototype.deleteConnection = function (walletId, connectionId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            connectionId: connectionId,
            options: options
        }, deleteConnectionOperationSpec, callback);
    };
    WalletServiceClient.prototype.listConnections = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, listConnectionsOperationSpec, callback);
    };
    WalletServiceClient.prototype.listInvitations = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, listInvitationsOperationSpec, callback);
    };
    WalletServiceClient.prototype.listCredentialsForConnectionId = function (walletId, connectionId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            connectionId: connectionId,
            options: options
        }, listCredentialsForConnectionIdOperationSpec, callback);
    };
    WalletServiceClient.prototype.listCredentials = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, listCredentialsOperationSpec, callback);
    };
    WalletServiceClient.prototype.getCredential = function (walletId, credentialId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            credentialId: credentialId,
            options: options
        }, getCredentialOperationSpec, callback);
    };
    WalletServiceClient.prototype.deleteCredential = function (walletId, credentialId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            credentialId: credentialId,
            options: options
        }, deleteCredentialOperationSpec, callback);
    };
    WalletServiceClient.prototype.acceptCredentialOffer = function (walletId, credentialId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            credentialId: credentialId,
            options: options
        }, acceptCredentialOfferOperationSpec, callback);
    };
    WalletServiceClient.prototype.acceptCredential = function (walletId, credentialData, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            credentialData: credentialData,
            options: options
        }, acceptCredentialOperationSpec, callback);
    };
    WalletServiceClient.prototype.listVerificationsForConnection = function (walletId, connectionId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            connectionId: connectionId,
            options: options
        }, listVerificationsForConnectionOperationSpec, callback);
    };
    WalletServiceClient.prototype.listVerifications = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, listVerificationsOperationSpec, callback);
    };
    WalletServiceClient.prototype.getVerification = function (walletId, verificationId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            options: options
        }, getVerificationOperationSpec, callback);
    };
    WalletServiceClient.prototype.deleteVerification = function (walletId, verificationId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            options: options
        }, deleteVerificationOperationSpec, callback);
    };
    WalletServiceClient.prototype.submitVerification = function (walletId, verificationId, body, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            body: body,
            options: options
        }, submitVerificationOperationSpec, callback);
    };
    WalletServiceClient.prototype.proposeVerification = function (walletId, connectionId, body, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            connectionId: connectionId,
            body: body,
            options: options
        }, proposeVerificationOperationSpec, callback);
    };
    WalletServiceClient.prototype.submitVerificationAutoSelect = function (walletId, verificationId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            options: options
        }, submitVerificationAutoSelectOperationSpec, callback);
    };
    WalletServiceClient.prototype.getAvailableCredentialsForVerification = function (walletId, verificationId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationId: verificationId,
            options: options
        }, getAvailableCredentialsForVerificationOperationSpec, callback);
    };
    WalletServiceClient.prototype.submitVerificationFromDataAutoSelect = function (walletId, verificationData, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationData: verificationData,
            options: options
        }, submitVerificationFromDataAutoSelectOperationSpec, callback);
    };
    WalletServiceClient.prototype.getAvailableCredentialsForParameters = function (walletId, verificationData, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            verificationData: verificationData,
            options: options
        }, getAvailableCredentialsForParametersOperationSpec, callback);
    };
    WalletServiceClient.prototype.submitVerificationForParameters = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, submitVerificationForParametersOperationSpec, callback);
    };
    WalletServiceClient.prototype.listWallets = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, listWalletsOperationSpec, callback);
    };
    WalletServiceClient.prototype.createWallet = function (body, options, callback) {
        return this.sendOperationRequest({
            body: body,
            options: options
        }, createWalletOperationSpec, callback);
    };
    WalletServiceClient.prototype.deleteWalletByQuery = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, deleteWalletByQueryOperationSpec, callback);
    };
    WalletServiceClient.prototype.deleteWallet = function (walletId, options, callback) {
        return this.sendOperationRequest({
            walletId: walletId,
            options: options
        }, deleteWalletOperationSpec, callback);
    };
    WalletServiceClient.prototype.health = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, healthOperationSpec, callback);
    };
    return WalletServiceClient;
}(walletServiceClientContext_1.WalletServiceClientContext));
exports.WalletServiceClient = WalletServiceClient;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var acceptInvitationOperationSpec = {
    httpMethod: "POST",
    path: "wallet/v1/api/{walletId}/connections/invitation",
    urlParameters: [
        Parameters.walletId
    ],
    formDataParameters: [
        Parameters.invitation
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getConnectionOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/connections/{connectionId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.connectionId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConnectionContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var deleteConnectionOperationSpec = {
    httpMethod: "DELETE",
    path: "wallet/v1/api/{walletId}/connections/{connectionId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.connectionId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listConnectionsOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/connections",
    urlParameters: [
        Parameters.walletId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectionContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listInvitationsOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/connections/invitations",
    urlParameters: [
        Parameters.walletId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectionContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listCredentialsForConnectionIdOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/credentials/connection/{connectionId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.connectionId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CredentialContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listCredentialsOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/credentials",
    urlParameters: [
        Parameters.walletId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CredentialContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getCredentialOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/credentials/{credentialId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.credentialId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CredentialContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var deleteCredentialOperationSpec = {
    httpMethod: "DELETE",
    path: "wallet/v1/api/{walletId}/credentials/{credentialId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.credentialId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var acceptCredentialOfferOperationSpec = {
    httpMethod: "POST",
    path: "wallet/v1/api/{walletId}/credentials/{credentialId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.credentialId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var acceptCredentialOperationSpec = {
    httpMethod: "PUT",
    path: "wallet/v1/api/{walletId}/credentials/fromData",
    urlParameters: [
        Parameters.walletId
    ],
    formDataParameters: [
        Parameters.credentialData
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.CredentialContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listVerificationsForConnectionOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/verifications/connection/{connectionId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.connectionId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listVerificationsOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/verifications",
    urlParameters: [
        Parameters.walletId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getVerificationOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/verifications/{verificationId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.verificationId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var deleteVerificationOperationSpec = {
    httpMethod: "DELETE",
    path: "wallet/v1/api/{walletId}/verifications/{verificationId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.verificationId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var submitVerificationOperationSpec = {
    httpMethod: "PUT",
    path: "wallet/v1/api/{walletId}/verifications/{verificationId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.verificationId
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "VerificationPolicyCredentialParameters"
                    }
                }
            }
        }
    },
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var proposeVerificationOperationSpec = {
    httpMethod: "PUT",
    path: "wallet/v1/api/{walletId}/verifications/propose/{connectionId}",
    urlParameters: [
        Parameters.walletId,
        Parameters.connectionId
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.VerificationPolicyParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.VerificationContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var submitVerificationAutoSelectOperationSpec = {
    httpMethod: "PUT",
    path: "wallet/v1/api/{walletId}/verifications/{verificationId}/autoSelect",
    urlParameters: [
        Parameters.walletId,
        Parameters.verificationId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getAvailableCredentialsForVerificationOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/{walletId}/verifications/{verificationId}/availableCredentials",
    urlParameters: [
        Parameters.walletId,
        Parameters.verificationId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationPolicyCredentialContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var submitVerificationFromDataAutoSelectOperationSpec = {
    httpMethod: "PUT",
    path: "wallet/v1/api/{walletId}/verifications/fromData/autoSelect",
    urlParameters: [
        Parameters.walletId
    ],
    formDataParameters: [
        Parameters.verificationData
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var getAvailableCredentialsForParametersOperationSpec = {
    httpMethod: "POST",
    path: "wallet/v1/api/{walletId}/verifications/fromData/availableCredentials",
    urlParameters: [
        Parameters.walletId
    ],
    formDataParameters: [
        Parameters.verificationData
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VerificationPolicyCredentialContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var submitVerificationForParametersOperationSpec = {
    httpMethod: "PUT",
    path: "wallet/v1/api/{walletId}/verifications/fromData",
    urlParameters: [
        Parameters.walletId
    ],
    requestBody: {
        parameterPath: [
            "options",
            "body"
        ],
        mapper: Mappers.VerificationDataPolicyCredentialParameters
    },
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var listWalletsOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/api/wallets",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustodianWalletContract"
                        }
                    }
                }
            }
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var createWalletOperationSpec = {
    httpMethod: "POST",
    path: "wallet/v1/api/wallets",
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.WalletParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CustodianWalletContract
        },
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var deleteWalletByQueryOperationSpec = {
    httpMethod: "DELETE",
    path: "wallet/v1/api/wallets",
    queryParameters: [
        Parameters.walletId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var deleteWalletOperationSpec = {
    httpMethod: "DELETE",
    path: "wallet/v1/api/wallets/{walletId}",
    urlParameters: [
        Parameters.walletId
    ],
    responses: {
        200: {},
        401: {},
        403: {},
        default: {}
    },
    serializer: serializer
};
var healthOperationSpec = {
    httpMethod: "GET",
    path: "wallet/v1/health",
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
