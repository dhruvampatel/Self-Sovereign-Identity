import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";
/**
 * An interface representing AgentEndpoint.
 */
export interface AgentEndpoint {
    did?: string;
    verkey?: string[];
    uri?: string;
}
/**
 * An interface representing ConnectionContract.
 */
export interface ConnectionContract {
    connectionId?: string;
    name?: string;
    imageUrl?: string;
    myDid?: string;
    theirDid?: string;
    myKey?: string;
    theirKey?: string;
    /**
     * Possible values include: 'Invited', 'Negotiating', 'Connected'
     */
    state?: State;
    invitation?: string;
    invitationUrl?: string;
    endpoint?: AgentEndpoint;
    createdAtUtc?: Date;
    multiParty?: boolean;
}
/**
 * An interface representing CredentialContract.
 */
export interface CredentialContract {
    credentialId?: string;
    /**
     * Possible values include: 'Offered', 'Requested', 'Issued', 'Rejected', 'Revoked'
     */
    state?: State1;
    connectionId?: string;
    definitionId?: string;
    schemaId?: string;
    offerData?: string;
    offerUrl?: string;
    issuedAtUtc?: Date;
    acceptedAtUtc?: Date;
    values?: {
        [propertyName: string]: string;
    };
    correlationId?: string;
}
/**
 * An interface representing ProofAttributeContract.
 */
export interface ProofAttributeContract {
    name?: string;
    value?: string;
    attributes?: {
        [propertyName: string]: string;
    };
    /**
     * **NOTE: This property will not be serialized. It can only be populated by the server.**
     */
    readonly revealed?: boolean;
    selfAttested?: boolean;
    conditional?: boolean;
}
/**
 * An interface representing VerificationPolicyRestrictionAttribute.
 */
export interface VerificationPolicyRestrictionAttribute {
    attributeName?: string;
    attributeValue?: string;
}
/**
 * An interface representing VerificationPolicyRestriction.
 */
export interface VerificationPolicyRestriction {
    schemaId?: string;
    schemaIssuerDid?: string;
    schemaName?: string;
    schemaVersion?: string;
    issuerDid?: string;
    credentialDefinitionId?: string;
    value?: VerificationPolicyRestrictionAttribute;
}
/**
 * An interface representing VerificationPolicyAttributeContract.
 */
export interface VerificationPolicyAttributeContract {
    policyName: string;
    attributeNames: string[];
    restrictions?: VerificationPolicyRestriction[];
}
/**
 * An interface representing VerificationPolicyPredicateContract.
 */
export interface VerificationPolicyPredicateContract {
    policyName: string;
    attributeName: string;
    predicateType: string;
    predicateValue: number;
    restrictions?: VerificationPolicyRestriction[];
}
/**
 * An interface representing VerificationPolicyRevocationRequirement.
 */
export interface VerificationPolicyRevocationRequirement {
    validAt?: Date;
    validNow?: boolean;
}
/**
 * An interface representing VerificationPolicyParameters.
 */
export interface VerificationPolicyParameters {
    name: string;
    version: string;
    attributes?: VerificationPolicyAttributeContract[];
    predicates?: VerificationPolicyPredicateContract[];
    revocationRequirement?: VerificationPolicyRevocationRequirement;
}
/**
 * An interface representing ProposedAttribute.
 */
export interface ProposedAttribute {
    name?: string;
    credentialDefinitionId?: string;
    schemaId?: string;
    issuerDid?: string;
    mimeType?: string;
    value?: string;
    referent?: string;
}
/**
 * An interface representing ProposedPredicate.
 */
export interface ProposedPredicate {
    name?: string;
    credentialDefinitionId?: string;
    issuerDid?: string;
    schemaId?: string;
    predicate?: string;
    threshold?: number;
    referent?: string;
}
/**
 * An interface representing ProofProposal.
 */
export interface ProofProposal {
    comment?: string;
    proposedAttributes?: ProposedAttribute[];
    proposedPredicates?: ProposedPredicate[];
}
/**
 * An interface representing VerificationContract.
 */
export interface VerificationContract {
    connectionId?: string;
    verificationId?: string;
    definitionId?: string;
    /**
     * Possible values include: 'Proposed', 'Requested', 'Accepted', 'Rejected'
     */
    state?: State2;
    createdAtUtc?: Date;
    updatedAtUtc?: Date;
    isValid?: boolean;
    verifiedAtUtc?: Date;
    proof?: {
        [propertyName: string]: ProofAttributeContract;
    };
    policy?: VerificationPolicyParameters;
    proposal?: ProofProposal;
    verificationRequestData?: string;
    verificationRequestUrl?: string;
}
/**
 * An interface representing VerificationPolicyCredentialParameters.
 */
export interface VerificationPolicyCredentialParameters {
    policyName?: string;
    credentialId?: string;
    hidden?: boolean;
}
/**
 * An interface representing VerificationPolicyCredentialContract.
 */
export interface VerificationPolicyCredentialContract {
    policyName?: string;
    attributeNames?: string[];
    availableCredentials?: CredentialContract[];
}
/**
 * An interface representing VerificationDataPolicyCredentialParameters.
 */
export interface VerificationDataPolicyCredentialParameters {
    verificationData?: string;
    parameters?: VerificationPolicyCredentialParameters[];
}
/**
 * Wallet information
 */
export interface CustodianWalletContract {
    /**
     * The wallet identifier
     */
    walletId?: string;
    /**
     * The wallet name
     */
    name?: string;
}
/**
 * Wallet parameters
 */
export interface WalletParameters {
    /**
     * The wallet identifier
     * <remarks>
     * This property can be null. If not set, a unique identifier will be generated
     * </remarks>
     */
    walletId?: string;
    /**
     * The owner name
     */
    ownerName?: string;
}
/**
 * An interface representing WalletServiceClientOptions.
 */
export interface WalletServiceClientOptions extends ServiceClientOptions {
    baseUri?: string;
}
/**
 * Optional Parameters.
 */
export interface WalletServiceClientSubmitVerificationForParametersOptionalParams extends msRest.RequestOptionsBase {
    /**
     * The verification parameters.
     */
    body?: VerificationDataPolicyCredentialParameters;
}
/**
 * Defines values for State.
 * Possible values include: 'Invited', 'Negotiating', 'Connected'
 * @readonly
 * @enum {string}
 */
export declare type State = 'Invited' | 'Negotiating' | 'Connected';
/**
 * Defines values for State1.
 * Possible values include: 'Offered', 'Requested', 'Issued', 'Rejected', 'Revoked'
 * @readonly
 * @enum {string}
 */
export declare type State1 = 'Offered' | 'Requested' | 'Issued' | 'Rejected' | 'Revoked';
/**
 * Defines values for State2.
 * Possible values include: 'Proposed', 'Requested', 'Accepted', 'Rejected'
 * @readonly
 * @enum {string}
 */
export declare type State2 = 'Proposed' | 'Requested' | 'Accepted' | 'Rejected';
/**
 * Contains response data for the acceptInvitation operation.
 */
export declare type AcceptInvitationResponse = ConnectionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ConnectionContract;
    };
};
/**
 * Contains response data for the getConnection operation.
 */
export declare type GetConnectionResponse = ConnectionContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ConnectionContract;
    };
};
/**
 * Contains response data for the listConnections operation.
 */
export declare type ListConnectionsResponse = Array<ConnectionContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ConnectionContract[];
    };
};
/**
 * Contains response data for the listInvitations operation.
 */
export declare type ListInvitationsResponse = Array<ConnectionContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: ConnectionContract[];
    };
};
/**
 * Contains response data for the listCredentialsForConnectionId operation.
 */
export declare type ListCredentialsForConnectionIdResponse = Array<CredentialContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialContract[];
    };
};
/**
 * Contains response data for the listCredentials operation.
 */
export declare type ListCredentialsResponse = Array<CredentialContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialContract[];
    };
};
/**
 * Contains response data for the getCredential operation.
 */
export declare type GetCredentialResponse = CredentialContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialContract;
    };
};
/**
 * Contains response data for the acceptCredential operation.
 */
export declare type AcceptCredentialResponse = CredentialContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CredentialContract;
    };
};
/**
 * Contains response data for the listVerificationsForConnection operation.
 */
export declare type ListVerificationsForConnectionResponse = Array<VerificationContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract[];
    };
};
/**
 * Contains response data for the listVerifications operation.
 */
export declare type ListVerificationsResponse = Array<VerificationContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract[];
    };
};
/**
 * Contains response data for the getVerification operation.
 */
export declare type GetVerificationResponse = VerificationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract;
    };
};
/**
 * Contains response data for the proposeVerification operation.
 */
export declare type ProposeVerificationResponse = VerificationContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationContract;
    };
};
/**
 * Contains response data for the getAvailableCredentialsForVerification operation.
 */
export declare type GetAvailableCredentialsForVerificationResponse = Array<VerificationPolicyCredentialContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationPolicyCredentialContract[];
    };
};
/**
 * Contains response data for the getAvailableCredentialsForParameters operation.
 */
export declare type GetAvailableCredentialsForParametersResponse = Array<VerificationPolicyCredentialContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: VerificationPolicyCredentialContract[];
    };
};
/**
 * Contains response data for the listWallets operation.
 */
export declare type ListWalletsResponse = Array<CustodianWalletContract> & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CustodianWalletContract[];
    };
};
/**
 * Contains response data for the createWallet operation.
 */
export declare type CreateWalletResponse = CustodianWalletContract & {
    /**
     * The underlying HTTP response.
     */
    _response: msRest.HttpResponse & {
        /**
         * The response body as text (string format)
         */
        bodyAsText: string;
        /**
         * The response body as parsed JSON or XML
         */
        parsedBody: CustodianWalletContract;
    };
};
